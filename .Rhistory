}
for (i in 1:nrow(frol$map_loaded)) {
if (frol$map_loaded$Estuary[i] == "Alligator") {
frol$map_loaded$Exp[i] <- "Lab"
}
}
table(frol$map_loaded$Estuary)
frol$map_loaded$Exp <- factor(frol$map_loaded$Exp,
levels = c("Obs", "Field", "Lab"))
frol$map_loaded$Estuary2 <- factor(frol$map_loaded$Estuary,
levels = c("SF",
"Waccamaw",
"Delaware",
"Alligator"))
frol$map_loaded$ExpEstSalt <- paste(frol$map_loaded$Exp, frol$map_loaded$EstSalt, sep = "_")
frol$map_loaded$ExpEstSalt <- factor(frol$map_loaded$ExpEstSalt,
levels = c("Lab_Alligator_Oligohaline", "Lab_Alligator_Freshwater",
"Lab_Delaware_Oligohaline", "Lab_Delaware_Freshwater",
"Field_Delaware_Oligohaline", "Field_Delaware_Freshwater",
"Obs_SF_Oligohaline", "Obs_SF_Freshwater",
"Field_Waccamaw_Oligohaline", "Field_Waccamaw_Freshwater"))
# Estuary with DE split into lab and field
frol$map_loaded$Estuary3 <- NA
for (i in 1:nrow(frol$map_loaded)) {
if (frol$map_loaded$Estuary[i] == "Delaware" &
frol$map_loaded$Site[i] == "Soil mesocosm") {
frol$map_loaded$Estuary3[i] <- "DE Field"
}
}
for (i in 1:nrow(frol$map_loaded)) {
if (frol$map_loaded$Estuary[i] == "Delaware" &
frol$map_loaded$Site[i] == "Soil incubation") {
frol$map_loaded$Estuary3[i] <- "DE Lab"
}
}
for (i in 1:nrow(frol$map_loaded)) {
if (frol$map_loaded$Estuary[i] == "SF") {
frol$map_loaded$Estuary3[i] <- "SF"
}
}
for (i in 1:nrow(frol$map_loaded)) {
if (frol$map_loaded$Estuary[i] == "Waccamaw") {
frol$map_loaded$Estuary3[i] <- "Waccamaw"
}
}
for (i in 1:nrow(frol$map_loaded)) {
if (frol$map_loaded$Estuary[i] == "Alligator") {
frol$map_loaded$Estuary3[i] <- "Alligator"
}
}
table(frol$map_loaded$Estuary3)
frol$map_loaded$Estuary3 <- factor(frol$map_loaded$Estuary3,
levels = c("SF", "Waccamaw", "DE Field", "DE Lab", "Alligator"))
frol$map_loaded$Est3Salt <- paste(frol$map_loaded$Estuary3, frol$map_loaded$Salt, sep = "_")
frol$map_loaded$Est3Salt <- factor(frol$map_loaded$Est3Salt,
levels = c("Alligator_Freshwater",
"Alligator_Oligohaline",
"DE Lab_Freshwater",
"DE Lab_Oligohaline",
"DE Field_Freshwater",
"DE Field_Oligohaline",
"SF_Freshwater",
"SF_Oligohaline",
"Waccamaw_Freshwater",
"Waccamaw_Oligohaline"))
levels(frol$map_loaded$Est3Salt)
# Add MG:MT ratio to metadata
frol_guilds <- summarize_taxonomy(input = frol, level = 9, report_higher_tax = F) %>%
t() %>%
as.data.frame() %>%
mutate(sampleID = rownames(.)) %>%
mutate(AO_NOB = (AOA + AOB) / NOB) %>%
mutate(MG = CH4_ac + CH4_H2 + CH4_me + CH4_mix) %>%
mutate(MT = MOB_I + MOB_II + MOB_IIa + ANME) %>%
mutate(MG_MT = (CH4_ac + CH4_H2 + CH4_me + CH4_mix)/(ANME + MOB_I + MOB_II + MOB_IIa)) %>%
left_join(., frol$map_loaded, by = "sampleID")
frol$map_loaded$MG_MT <- frol_guilds$MG_MT
# Add NC C, N, CN. Got data later so adding here!
nc_cn <- read_excel("data/Copy of CHN data.xls", sheet = 2) %>%
slice(12:91) %>%
dplyr::select(Name, `%N`, `%C`, `C:N`) %>%
mutate(Name = gsub("bottom", "bot", Name)) %>%
separate(Name, into = c("ID", "Depth"), sep = " ", remove = F) %>%
mutate(Treatment = substr(ID, start = 1, stop = 1),
Hydro = substr(ID, start = 2, stop = 2),
Replicate = substr(ID, start = 3, stop = 3)) %>%
filter(Hydro == "F") %>%
mutate(Treatment = recode_factor(Treatment,
"A" = "Control",
"B" = "ASW",
"C" = "ASW_noS",
"D" = "SO4")) %>%
filter(Treatment %in% c("Control", "ASW")) %>%
arrange(desc(Depth), desc(Treatment)) %>%
filter(Name %notin% c("BF1 top", "BF2 top", "AF1 top", "BF2 bot", "AF2 bot"))
rownames(frol$map_loaded)
frol$map_loaded$sed_per_C[47:61] <- nc_cn$`%C`
frol$map_loaded$sed_per_N[47:61] <- nc_cn$`%N`
frol$map_loaded$sed_CN[47:61] <- nc_cn$`C:N`
# Add Delaware lab pH data (Nat found much later on!)
de_ph <- read_xlsx("data/Delaware Lab Expt pH.xlsx", sheet = 2) %>%
arrange(sampleID)
sum(rownames(frol$map_loaded)[9:16] != de_ph$sampleID) # good
frol$map_loaded$pH[9:16] <- de_ph$pH
# Add Delaware CH4 data
# Nat sent whole-core integrated values. Add duplicates to D1 and D2 like the other datasets
# When plotting, only plot one depth though.
# Don't use other lab biogeochem data because they are all integrated and not separated by depth
# Values would have to be repeated by depth and this is not accurate, better to leave out.
# And actually, can't even back convert from integrated to concentration because don't have datasheet.
for (i in 1:nrow(frol$map_loaded)) {
if (frol$map_loaded$sampleID[i] == "TS_FW_d1_12_1") {
frol$map_loaded$CH4_ug_m2_h[i] <- 20303.49838
}
}
for (i in 1:nrow(frol$map_loaded)) {
if (frol$map_loaded$sampleID[i] == "TS_FW_d2_12_1") {
frol$map_loaded$CH4_ug_m2_h[i] <- 20303.49838
}
}
for (i in 1:nrow(frol$map_loaded)) {
if (frol$map_loaded$sampleID[i] == "TS_FW_d1_12_2") {
frol$map_loaded$CH4_ug_m2_h[i] <- 84770.97026
}
}
for (i in 1:nrow(frol$map_loaded)) {
if (frol$map_loaded$sampleID[i] == "TS_FW_d2_12_2") {
frol$map_loaded$CH4_ug_m2_h[i] <- 84770.97026
}
}
for (i in 1:nrow(frol$map_loaded)) {
if (frol$map_loaded$sampleID[i] == "TS_SW_d1_12_1") {
frol$map_loaded$CH4_ug_m2_h[i] <- 32976.95881
}
}
for (i in 1:nrow(frol$map_loaded)) {
if (frol$map_loaded$sampleID[i] == "TS_SW_d2_12_1") {
frol$map_loaded$CH4_ug_m2_h[i] <- 32976.95881
}
}
for (i in 1:nrow(frol$map_loaded)) {
if (frol$map_loaded$sampleID[i] == "TS_SW_d1_12_2") {
frol$map_loaded$CH4_ug_m2_h[i] <- 68221.38115
}
}
for (i in 1:nrow(frol$map_loaded)) {
if (frol$map_loaded$sampleID[i] == "TS_SW_d2_12_2") {
frol$map_loaded$CH4_ug_m2_h[i] <- 68221.38115
}
}
# Subsets
sf <- filter_data(frol,
filter_cat = "Estuary",
keep_vals = "SF")
de <- filter_data(frol,
filter_cat = "Estuary",
keep_vals = "Delaware")
detra <- filter_data(de,
filter_cat = "Site",
keep_vals = "Soil mesocosm")
sc <- filter_data(frol,
filter_cat = "Estuary",
keep_vals = "Waccamaw")
deinc <- filter_data(de,
filter_cat = "Site",
keep_vals = "Soil incubation")
nc <- filter_data(frol,
filter_cat = "Estuary",
keep_vals = "Alligator")
# Get environmental variables for each
env <- frol$map_loaded %>%
dplyr::select(CH4_ug_m2_h, Salinity_ppt_all, pH)
env_nona <- na.omit(env) # n = 110. 102 with pH.
env_sf <- sf$map_loaded %>%
dplyr::select(CH4_ug_m2_h, CO2_ug_m2_h,
Salinity_ppt_all, SO4_mgL, DOC_mgL, Fe_mgL, Mn_mgL, Cu_mgL, Zn_mgL,
sed_pH, sed_NH4_mgL, sed_NO3_mgL, sed_PO4_mgL, sed_Cl_mgL, sed_SO4_mgL,
sed_per_C, sed_per_N, sed_CN, sed_Bulk_dens,
sed_Fe_mgL, sed_Mn_mgL, sed_Cu_mgL, sed_Zn_mgL)
env_nona_sf <- na.omit(env_sf) # n = 30 (just D2)
env_detra <- detra$map_loaded %>%
dplyr::select(CH4_ug_m2_h, N2O_ug_m2_h,
Salinity_ppt_all,
NH4_mgL, PO4_mgL, Cl_mgL, SO4_mgL,
Fe_mgL, Porosity, Acetate_mgL, TotalVFA_uM, SR_umol_cm3_d, AMG_umol_cm3_d)
env_nona_detra <- na.omit(env_detra) # n = 8
env_deinc <- deinc$map_loaded %>%
dplyr::select(CH4_ug_m2_h,
#Salinity_ppt_all, # No salinity because in mmol/m2 and can't convert
pH)
env_nona_deinc <- na.omit(env_deinc) # n = 8
env_sc <- sc$map_loaded %>%
dplyr::select(CH4_ug_m2_h, CO2_ug_m2_h, CH4_pw_air_ppmv,
CH4_pot_umol_gdw_h, CO2_pot_umol_gdw_h,
N2_umol_m2_h,	SOD_umol_m2_h, NO3_umol_m2_h,	NH4_umol_m2_h, SRP_umol_m2_h, DON_umol_m2_h,
Conductivity_uS_cm, Salinity_ppt_all, DIC_mgL,
sed_per_C, sed_per_N, sed_CN, sed_per_org, sed_per_inorg, pH)
env_nona_sc <- na.omit(env_sc) # n = 15
env_nc <- nc$map_loaded %>%
dplyr::select(CH4_ug_m2_h, CO2_ug_m2_h, N2O_ug_m2_h, Salinity_ppt_all,
TOC_mgL, TN_mgL, NH4_mgL, PO4_mgL, Cl_mgL, SO4_mgL, Br_mgL, NO3_mgL,
DIN_mgL, DON_mgL, pH, sed_per_C, sed_per_N, sed_CN)
env_nona_nc <- na.omit(env_nc) # n = 15
### __Methanotrophs ####
frol_mt <- filter_taxa_from_input(frol,
taxa_to_keep = c("ANME", "MOB_I", "MOB_II", "MOB_IIa"),
at_spec_level = 9)
View(frol_mt$taxonomy_loaded)
# Remove Methylotenera. Methylotroph but not CH4 oxidizer!
frol_mt <- filter_taxa_from_input(frol_mt,
taxa_to_remove = "Methylotenera",
at_spec_level = 6)
tax_sum_mt <- summarize_taxonomy(input = frol_mt,
level = 6,
report_higher_tax = F,
relative = F) %>%
# filter(rownames(.) != "NA") %>%
mutate_all(funs((./31264)*100))
barsMT <- plot_taxa_bars(tax_sum_mt,
frol_mt$map_loaded,
"sampleID",
num_taxa = 20,
data_only = TRUE) %>%
mutate(taxon = gsub("NA", "Unclassified", taxon)) %>%
mutate(taxon = fct_relevel(taxon, "Other", after = Inf)) %>%
mutate(taxon = fct_relevel(taxon, "Unclassified", after = Inf)) %>%
mutate(taxon = fct_rev(taxon)) %>%
left_join(., frol_mt$map_loaded, by = c("group_by" = "sampleID"))
topmt <- barsMT %>%
group_by(taxon) %>%
summarise(mean = mean(mean_value)) %>%
arrange(-mean)
barsMT <- barsMT %>%
mutate(taxon = factor(taxon, levels = topmt$taxon)) %>%
mutate(taxon = fct_relevel(taxon, "Other", after = Inf)) %>%
mutate(taxon = fct_relevel(taxon, "Unclassified", after = Inf)) %>%
mutate(taxon = fct_rev(taxon))
facet_names <- c("Obs" = "Observational",
"Field" = "Field",
"Lab" = "Lab",
"Waccamaw" = "Waccamaw",
"Alligator" = "Alligator",
"Delaware" = "Delaware",
"SF" = "SF",
"Freshwater" = "Fresh",
"Oligohaline" = "Oligo")
nb.cols <- 19
mycolors <- colorRampPalette(brewer.pal(12, "Paired"))(nb.cols)
ggplot(barsMT, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", colour = NA, size = 0.25) +
labs(x = "Sample", y = "% Abundance", fill = "Genus") +
scale_fill_manual(values = c("grey75", "grey90", mycolors)) +
scale_y_continuous(expand = c(0.01, 0.01)) +
facet_nested(~ Exp + Estuary2 + Salt, space = "free", scales = "free_x",
labeller = as_labeller(facet_names)) +
guides(fill = guide_legend(ncol = 1)) +
theme_classic() +
theme(axis.title.y = element_text(face = "bold", size = 12),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text = element_text(size = 4),
strip.background = element_rect(size = 0.2),
axis.line.y = element_blank(),
legend.margin = margin(0, 0, 0, 0, unit = "pt"),
legend.box.margin = margin(5, 5, 5, 5, unit = "pt"),
legend.key.size = unit(0.3, "cm"),
legend.position = "none")
png("FigureS4_forPPT.png", width = 6.5, height = 6, units = "in", res = 300)
ggplot(barsMT, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", colour = NA, size = 0.25) +
labs(x = "Sample", y = "% Abundance", fill = "Genus") +
scale_fill_manual(values = c("grey75", "grey90", mycolors)) +
scale_y_continuous(expand = c(0.01, 0.01)) +
facet_nested(~ Exp + Estuary2 + Salt, space = "free", scales = "free_x",
labeller = as_labeller(facet_names)) +
guides(fill = guide_legend(ncol = 1)) +
theme_classic() +
theme(axis.title.y = element_text(face = "bold", size = 12),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text = element_text(size = 4),
strip.background = element_rect(size = 0.2),
axis.line.y = element_blank(),
legend.margin = margin(0, 0, 0, 0, unit = "pt"),
legend.box.margin = margin(5, 5, 5, 5, unit = "pt"),
legend.key.size = unit(0.3, "cm"),
legend.position = "none")
dev.off()
# Subsets
sf_mt <- filter_data(frol_mt,
filter_cat = "Estuary",
keep_vals = "SF")
de_mt <- filter_data(frol_mt,
filter_cat = "Estuary",
keep_vals = "Delaware")
detra_mt <- filter_data(de_mt,
filter_cat = "Site",
keep_vals = "Soil mesocosm")
sc_mt <- filter_data(frol_mt,
filter_cat = "Estuary",
keep_vals = "Waccamaw")
deinc_mt <- filter_data(de_mt,
filter_cat = "Site",
keep_vals = "Soil incubation")
nc_mt <- filter_data(frol_mt,
filter_cat = "Estuary",
keep_vals = "Alligator")
# Stats
tax_sum_mt_sc <- summarize_taxonomy(input = sc_mt, level = 6, report_higher_tax = F) %>%
filter(rownames(.) %in% barsMT$taxon)
res_mt_sc <- taxa_summary_by_sample_type(taxa_smry_df = tax_sum_mt_sc,
metadata_map = sc_mt$map_loaded,
type_header = 'Salt',
test_type = 'MW') %>%
mutate(Estuary = "Waccamaw",
Level = "Genus",
Taxon = rownames(.)) %>%
arrange(desc(Taxon)) %>%
mutate(Sig = ifelse(pvalsFDR < 0.05, "Yes", "No")) %>%
mutate(SaltEffect = ifelse(Sig == "Yes",
ifelse(Freshwater > Oligohaline, "-", "+"),
""))
tax_sum_mt_nc <- summarize_taxonomy(input = nc_mt, level = 6, report_higher_tax = F) %>%
filter(rownames(.) %in% barsMT$taxon)
res_mt_nc <- taxa_summary_by_sample_type(taxa_smry_df = tax_sum_mt_nc,
metadata_map = nc_mt$map_loaded,
type_header = 'Salt',
test_type = 'MW') %>%
mutate(Estuary = "Alligator",
Level = "Genus",
Taxon = rownames(.)) %>%
arrange(desc(Taxon)) %>%
mutate(Sig = ifelse(pvalsFDR < 0.05, "Yes", "No")) %>%
mutate(SaltEffect = ifelse(Sig == "Yes",
ifelse(Freshwater > Oligohaline, "-", "+"),
""))
# DE Field
tax_sum_mt_detra <- summarize_taxonomy(input = detra_mt, level = 6, report_higher_tax = F) %>%
filter(rownames(.) %in% barsMT$taxon)
res_mt_detra <- taxa_summary_by_sample_type(taxa_smry_df = tax_sum_mt_detra,
metadata_map = detra_mt$map_loaded,
type_header = 'Salt',
test_type = 'MW') %>%
mutate(Estuary = "Delaware Field",
Level = "Genus",
Taxon = rownames(.)) %>%
arrange(desc(Taxon)) %>%
mutate(Sig = ifelse(pvalsFDR < 0.05, "Yes", "No")) %>%
mutate(SaltEffect = ifelse(Sig == "Yes",
ifelse(Freshwater > Oligohaline, "-", "+"),
""))
# DE Lab
tax_sum_mt_deinc <- summarize_taxonomy(input = deinc_mt, level = 6, report_higher_tax = F) %>%
filter(rownames(.) %in% barsMT$taxon)
res_mt_deinc <- taxa_summary_by_sample_type(taxa_smry_df = tax_sum_mt_deinc,
metadata_map = deinc_mt$map_loaded,
type_header = 'Salt',
test_type = 'MW') %>%
mutate(Estuary = "Delaware Lab",
Level = "Genus",
Taxon = rownames(.)) %>%
arrange(desc(Taxon)) %>%
mutate(Sig = ifelse(pvalsFDR < 0.05, "Yes", "No")) %>%
mutate(SaltEffect = ifelse(Sig == "Yes",
ifelse(Freshwater > Oligohaline, "-", "+"),
""))
# SF
tax_sum_mt_sf <- summarize_taxonomy(input = sf_mt, level = 6, report_higher_tax = F) %>%
filter(rownames(.) %in% barsMT$taxon)
res_mt_sf <- taxa_summary_by_sample_type(taxa_smry_df = tax_sum_mt_sf,
metadata_map = sf_mt$map_loaded,
type_header = 'Salt',
test_type = 'MW') %>%
mutate(Estuary = "SF",
Level = "Genus",
Taxon = rownames(.)) %>%
arrange(desc(Taxon)) %>%
mutate(Sig = ifelse(pvalsFDR < 0.05, "Yes", "No")) %>%
mutate(SaltEffect = ifelse(Sig == "Yes",
ifelse(Freshwater > Oligohaline, "-", "+"),
""))
# Full join, takes into account different taxa among the sites
# Order should be SF, WA, DEF, DEL, AL
topmt_noUC <- subset(topmt, taxon != "Unclassified" & taxon != "Other") %>%
mutate(ord = rev(seq(1:19)))
res_mt <- full_join(res_mt_sf, res_mt_sc, by = "Taxon", keep = F) %>%
full_join(., res_mt_detra, by = "Taxon", keep = F) %>%
full_join(., res_mt_deinc, by = "Taxon", keep = F) %>%
full_join(., res_mt_nc, by = "Taxon", keep = F) %>%
dplyr::select(Taxon, SaltEffect.x, SaltEffect.y, SaltEffect.x.x, SaltEffect.y.y, SaltEffect) %>%
set_names(c("Taxon", "SF", "WA", "DEF", "DEL", "AL")) %>%
replace_na(., replace = list(SF = "NP", WA = "NP", DEF = "NP", DEL = "NP", AL = "NP")) %>%
left_join(., frol_mt$taxonomy_loaded, by = c("Taxon" = "taxonomy6")) %>%
group_by(Taxon) %>%
slice(n = 1) %>%
left_join(., topmt_noUC, by = c("Taxon" = "taxon")) %>%
arrange(ord) %>%
dplyr::select(-mean, -ord, -taxonomy1, -taxonomy2, -taxonomy3, -taxonomy4, -taxonomy5, -taxonomy7, -taxonomy8)
write_xlsx(res_mt, "mt_results_unformatted.xlsx", format_headers = F)
View(topmt_noUC)
res_mt <- full_join(res_mt_sf, res_mt_sc, by = "Taxon", keep = F) %>%
full_join(., res_mt_detra, by = "Taxon", keep = F) %>%
full_join(., res_mt_deinc, by = "Taxon", keep = F) %>%
full_join(., res_mt_nc, by = "Taxon", keep = F) %>%
dplyr::select(Taxon, SaltEffect.x, SaltEffect.y, SaltEffect.x.x, SaltEffect.y.y, SaltEffect) %>%
set_names(c("Taxon", "SF", "WA", "DEF", "DEL", "AL")) %>%
replace_na(., replace = list(SF = "NP", WA = "NP", DEF = "NP", DEL = "NP", AL = "NP")) %>%
left_join(., frol_mt$taxonomy_loaded, by = c("Taxon" = "taxonomy6")) %>%
group_by(Taxon) %>%
slice_head(n = 1) %>%
left_join(., topmt_noUC, by = c("Taxon" = "taxon")) %>%
arrange(ord) %>%
dplyr::select(-mean, -ord, -taxonomy1, -taxonomy2, -taxonomy3, -taxonomy4,
-taxonomy5, -taxonomy7, -taxonomy8)
write_xlsx(res_mt, "mt_results_unformatted.xlsx", format_headers = F)
View(res_mt)
ggplot(barsMG, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", colour = NA, size = 0.25) +
labs(x = "Sample", y = "% Abundance", fill = "Family") +
scale_fill_manual(values = c("grey90", mycolors)) +
scale_y_continuous(expand = c(0.01, 0.01),
limits = c(0,9)) +
facet_nested(~ Exp + Estuary2 + Salt, space = "free", scales = "free_x",
labeller = as_labeller(facet_names)) +
guides(fill = guide_legend(ncol = 1)) +
theme_classic() +
theme(axis.title.y = element_text(face = "bold", size = 12),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text = element_text(size = 4),
strip.background = element_rect(size = 0.2),
axis.line.y = element_blank(),
legend.margin = margin(0, 0, 0, 0, unit = "pt"),
legend.box.margin = margin(5, 5, 5, 5, unit = "pt"),
legend.key.size = unit(0.3, "cm"),
legend.position = "none")
ggplot(barsMT, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", colour = NA, size = 0.25) +
labs(x = "Sample", y = "% Abundance", fill = "Genus") +
scale_fill_manual(values = c("grey75", "grey90", mycolors)) +
scale_y_continuous(expand = c(0.01, 0.01),
limits = c(0,9)) +
facet_nested(~ Exp + Estuary2 + Salt, space = "free", scales = "free_x",
labeller = as_labeller(facet_names)) +
guides(fill = guide_legend(ncol = 1)) +
theme_classic() +
theme(axis.title.y = element_text(face = "bold", size = 12),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text = element_text(size = 4),
strip.background = element_rect(size = 0.2),
axis.line.y = element_blank(),
legend.margin = margin(0, 0, 0, 0, unit = "pt"),
legend.box.margin = margin(5, 5, 5, 5, unit = "pt"),
legend.key.size = unit(0.3, "cm"),
legend.position = "none")
png("FigureS4_forPPT.png", width = 6.5, height = 6, units = "in", res = 300)
ggplot(barsMT, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", colour = NA, size = 0.25) +
labs(x = "Sample", y = "% Abundance", fill = "Genus") +
scale_fill_manual(values = c("grey75", "grey90", mycolors)) +
scale_y_continuous(expand = c(0.01, 0.01),
limits = c(0,9)) +
facet_nested(~ Exp + Estuary2 + Salt, space = "free", scales = "free_x",
labeller = as_labeller(facet_names)) +
guides(fill = guide_legend(ncol = 1)) +
theme_classic() +
theme(axis.title.y = element_text(face = "bold", size = 12),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text = element_text(size = 4),
strip.background = element_rect(size = 0.2),
axis.line.y = element_blank(),
legend.margin = margin(0, 0, 0, 0, unit = "pt"),
legend.box.margin = margin(5, 5, 5, 5, unit = "pt"),
legend.key.size = unit(0.3, "cm"),
legend.position = "none")
dev.off()
png("FigureS4_forPPT.png", width = 6.5, height = 6, units = "in", res = 300)
ggplot(barsMT, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", colour = NA, size = 0.25) +
labs(x = "Sample", y = "% Abundance", fill = "Genus") +
scale_fill_manual(values = c("grey75", "grey90", mycolors)) +
scale_y_continuous(expand = c(0.01, 0.01),
limits = c(0,10)) +
facet_nested(~ Exp + Estuary2 + Salt, space = "free", scales = "free_x",
labeller = as_labeller(facet_names)) +
guides(fill = guide_legend(ncol = 1)) +
theme_classic() +
theme(axis.title.y = element_text(face = "bold", size = 12),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text = element_text(size = 4),
strip.background = element_rect(size = 0.2),
axis.line.y = element_blank(),
legend.margin = margin(0, 0, 0, 0, unit = "pt"),
legend.box.margin = margin(5, 5, 5, 5, unit = "pt"),
legend.key.size = unit(0.3, "cm"),
legend.position = "none")
dev.off()
