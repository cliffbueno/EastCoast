sf_sal_met$Region2 <- sf_sal_met$Region
for (i in 1:nrow(sf_sal_met)) {
if(sf_sal_met$Location[i] == "R1" | sf_sal_met$Location[i] == "R2") {
sf_sal_met$Region2[i] <- "Unrestored saltern"
}
if(sf_sal_met$Location[i] == "SF2") {
sf_sal_met$Region2[i] <- "Restored saltern"
}
if(sf_sal_met$Location[i] == "R2A") {
sf_sal_met$Region2[i] <- "South Bay reference"
}
}
sf_sal_met$Region2 <- factor(sf_sal_met$Region2,
levels = c("Delta",
"Bay",
"South Bay reference",
"Restored saltern",
"Unrestored saltern"))
coords <- sf_sal_met %>%
select(Location, Region2, Latitude, Longitude) %>%
group_by(Region2, Location) %>%
slice_head(n = 1)
#### Map ####
# Use some code from Wyatt paper Figure 1 but update to include South Bya
# Map with ggmap
adjust = c("R1", "R2", "SF2", "R2A")
coords1 <- subset(coords, Location %notin% adjust)
coords2 <- subset(coords, Location == "R1")
coords3 <- subset(coords, Location == "R2")
coords4 <- subset(coords, Location == "SF2")
coords5 <- subset(coords, Location == "R2A")
coords_delta <- subset(coords, Region2 == "Delta")
coords_bay <- subset(coords, Region2 == "Bay")
# Map
sfbay <- get_stamenmap(bbox = c(left = -122.6,
bottom = 37.434552,
right = -121.5,
top = 38.273536),
zoom = 10,
maptype = "terrain-background")
sfbay_attributes <- attributes(sfbay)
sfbay_transparent <- matrix(adjustcolor(sfbay, alpha.f = 0.4), nrow = nrow(sfbay))
attributes(sfbay_transparent) <- sfbay_attributes
path <- data.frame(x = c(-121.93, -121.93, -121.50),
y = c(38.263536, 37.95, 37.95))
g1 <- ggmap(sfbay_transparent, extent = "device") + # the base map
geom_point(data = coords_delta,
aes(x = Longitude, y = Latitude), color = hue_pal()(5)[1], size = 4) +
geom_point(data = coords_bay,
aes(x = Longitude, y = Latitude), color = hue_pal()(5)[2], size = 4) +
geom_point(data = coords2,
aes(x = Longitude - 0.01, y = Latitude + 0.01),
color = hue_pal()(5)[5], size = 4) +
geom_point(data = coords3,
aes(x = Longitude - 0.01, y = Latitude + 0.005),
color = hue_pal()(5)[5], size = 4) +
geom_point(data = coords4,
aes(x = Longitude, y = Latitude -0.01),
color = hue_pal()(5)[4], size = 4) +
geom_point(data = coords5,
aes(x = Longitude + 0.01, y = Latitude + 0.01),
color = hue_pal()(5)[3], size = 4) +
geom_text(aes(x = -121.7, y = 38.2, label = "Delta"),
colour = "black", size = 6, fontface = "italic", check_overlap = T) +
geom_text(aes(x = -122.3, y = 38.2, label = "Bay"),
colour = "black", size = 6, fontface = "italic", check_overlap = T) +
geom_text(aes(x = -122.1, y = 37.6, label = "South Bay"),
colour = "black", size = 6, fontface = "italic", check_overlap = T) +
geom_text(aes(x = -122.4, y = 38.05, label = "San Pablo\nBay"),
colour = "white", size = 3, check_overlap = T) +
geom_text(aes(x = -122.27, y = 37.65, label = "San Francisco\nBay"),
colour = "white", size = 3, check_overlap = T) +
geom_text(aes(x = -122.55, y = 37.65, label = "Pacific\nOcean"),
colour = "white", size = 3, check_overlap = T) +
geom_text(aes(x = -122.44, y = 37.75, label = "San Francisco"),
colour = "grey40", size = 3, check_overlap = T) +
geom_text(aes(x = -122.27, y = 37.81, label = "Oakland"),
colour = "grey40", size = 3, check_overlap = T) +
geom_path(data = path, aes(x = x, y = y), linetype = "dashed", size = 0.25) +
geom_segment(aes(x = -121.54, xend = -121.54, y = 37.46, yend = 37.49), arrow = arrow(length = unit(0.30, "cm"))) +
geom_text(aes(x = -121.54, y = 37.51, label = "N"),
colour = "black", size = 4, check_overlap = T) +
xlab(NULL) +
ylab(NULL) +
scalebar(x.min = -122.6,
y.min = 37.48,
x.max = -121.6,
y.max = 37.98,
dist = 10, dist_unit = "km", height = 0.02, st.dist = 0.03, st.size = 4,
transform = TRUE, model = "WGS84", location = "bottomright") +
theme(legend.position = "none",
plot.margin = unit(c(0,-1,0,-1), "cm"),
axis.text = element_text(size = 8, color = "black"))
g1
#### Methane/Salinity ####
m1 <- lm(Methane ~ Salinity, data = sf_sal_met)
summary(m1)
m2 <- lm(Methane ~ poly(Salinity, 2, raw = TRUE), data = sf_sal_met)
summary(m2)
m3 <- lm(Methane ~ poly(Salinity, 3, raw = TRUE), data = sf_sal_met)
summary(m3)
Anova(m, m1) # polynomial better, plot polynomial line on graph
g2 <- ggplot(sf_sal_met, aes(Salinity, Methane, colour = Region2)) +
geom_vline(xintercept = 35, linetype = "dashed", size = 0.5, color = "gray") +
geom_point(size = 4, alpha = 0.75) +
geom_smooth(aes(Salinity, Methane),
method = "lm",
formula = y ~ x + I(x^2) + I(x^3),
inherit.aes = F,
se = T,
size = 0.5, alpha = 0.5) +
labs(x = "Salinity (ppt)",
y = expression(""*CH[4]*" flux (Âµg/"*m^2*"/h)"),
colour = NULL) +
scale_x_continuous(trans = 'log10') +
theme_classic() +
theme(legend.position = "bottom",
legend.background = element_blank(),
legend.spacing.y = unit(0, "cm"),
legend.margin = margin(0, 12, 0.2, 0, unit = "cm"),
axis.title = element_text(size = 12, color = "black"),
axis.text = element_text(size = 10, color = "black"),
axis.ticks = element_line(color = "black"))
g2
#### Figure 1 ####
# Note, need to play around with device size, has big effect!
figure1 <- plot_grid(g1, g2, ncol = 2, align = "h", rel_widths = c(1, 1),
labels = c("a", "b"), axis = c("tbrl"))
figure1
pdf("~/Desktop/Metabolomics/Manuscript/Figure1.pdf", width = 9.7, height = 5.21)
figure1
dev.off()
jinglie <- read_xlsx("~/Desktop/SouthBay/Manuscript_Jinglie/Supplement Table 4.xlsx") %>%
filter(Depth == "D1") %>%
select(Site, Salinity_ppt, CH4_umol_m2_d, Lat, Long) %>%
mutate(Dataset = "Zhou et al.") %>%
`colnames<-`(c("Location", "Salinity", "Methane", "Latitude", "Longitude", "Dataset"))
sf_sal_met <- rbind(wyatt, jinglie)
# Make region column
sf_sal_met$Region <- NA
for (i in 1:nrow(sf_sal_met)) {
if(sf_sal_met$Location[i] == "R1" | sf_sal_met$Location[i] == "R2"| sf_sal_met$Location[i] == "R2A"| sf_sal_met$Location[i] == "SF2") {
sf_sal_met$Region[i] <- "South Bay"
}
}
for (i in 1:nrow(sf_sal_met)) {
if(sf_sal_met$Location[i] == "WestPond" | sf_sal_met$Location[i] == "Mayberry" |sf_sal_met$Location[i] == "Browns" | sf_sal_met$Location[i] == "Sandmound") {
sf_sal_met$Region[i] <- "Delta"
}
}
for (i in 1:nrow(sf_sal_met)) {
if(is.na(sf_sal_met$Region[i]) == TRUE) {
sf_sal_met$Region[i] <- "Bay"
}
}
sf_sal_met$Region2 <- sf_sal_met$Region
for (i in 1:nrow(sf_sal_met)) {
if(sf_sal_met$Location[i] == "R1" | sf_sal_met$Location[i] == "R2") {
sf_sal_met$Region2[i] <- "Unrestored saltern"
}
if(sf_sal_met$Location[i] == "SF2") {
sf_sal_met$Region2[i] <- "Restored saltern"
}
if(sf_sal_met$Location[i] == "R2A") {
sf_sal_met$Region2[i] <- "South Bay reference"
}
}
sf_sal_met$Region2 <- factor(sf_sal_met$Region2,
levels = c("Delta",
"Bay",
"South Bay reference",
"Restored saltern",
"Unrestored saltern"))
coords <- sf_sal_met %>%
select(Location, Region2, Latitude, Longitude) %>%
group_by(Region2, Location) %>%
slice_head(n = 1)
#### Map ####
# Use some code from Wyatt paper Figure 1 but update to include South Bya
# Map with ggmap
adjust = c("R1", "R2", "SF2", "R2A")
coords1 <- subset(coords, Location %notin% adjust)
coords2 <- subset(coords, Location == "R1")
coords3 <- subset(coords, Location == "R2")
coords4 <- subset(coords, Location == "SF2")
coords5 <- subset(coords, Location == "R2A")
coords_delta <- subset(coords, Region2 == "Delta")
coords_bay <- subset(coords, Region2 == "Bay")
# Map
sfbay <- get_stamenmap(bbox = c(left = -122.6,
bottom = 37.434552,
right = -121.5,
top = 38.273536),
zoom = 10,
maptype = "terrain-background")
sfbay_attributes <- attributes(sfbay)
sfbay_transparent <- matrix(adjustcolor(sfbay, alpha.f = 0.4), nrow = nrow(sfbay))
attributes(sfbay_transparent) <- sfbay_attributes
path <- data.frame(x = c(-121.93, -121.93, -121.50),
y = c(38.263536, 37.95, 37.95))
g1 <- ggmap(sfbay_transparent, extent = "device") + # the base map
geom_point(data = coords_delta,
aes(x = Longitude, y = Latitude), color = hue_pal()(5)[1], size = 4) +
geom_point(data = coords_bay,
aes(x = Longitude, y = Latitude), color = hue_pal()(5)[2], size = 4) +
geom_point(data = coords2,
aes(x = Longitude - 0.01, y = Latitude + 0.01),
color = hue_pal()(5)[5], size = 4) +
geom_point(data = coords3,
aes(x = Longitude - 0.01, y = Latitude + 0.005),
color = hue_pal()(5)[5], size = 4) +
geom_point(data = coords4,
aes(x = Longitude, y = Latitude -0.01),
color = hue_pal()(5)[4], size = 4) +
geom_point(data = coords5,
aes(x = Longitude + 0.01, y = Latitude + 0.01),
color = hue_pal()(5)[3], size = 4) +
geom_text(aes(x = -121.7, y = 38.2, label = "Delta"),
colour = "black", size = 6, fontface = "italic", check_overlap = T) +
geom_text(aes(x = -122.3, y = 38.2, label = "Bay"),
colour = "black", size = 6, fontface = "italic", check_overlap = T) +
geom_text(aes(x = -122.1, y = 37.6, label = "South Bay"),
colour = "black", size = 6, fontface = "italic", check_overlap = T) +
geom_text(aes(x = -122.4, y = 38.05, label = "San Pablo\nBay"),
colour = "white", size = 3, check_overlap = T) +
geom_text(aes(x = -122.27, y = 37.65, label = "San Francisco\nBay"),
colour = "white", size = 3, check_overlap = T) +
geom_text(aes(x = -122.55, y = 37.65, label = "Pacific\nOcean"),
colour = "white", size = 3, check_overlap = T) +
geom_text(aes(x = -122.44, y = 37.75, label = "San Francisco"),
colour = "grey40", size = 3, check_overlap = T) +
geom_text(aes(x = -122.27, y = 37.81, label = "Oakland"),
colour = "grey40", size = 3, check_overlap = T) +
geom_path(data = path, aes(x = x, y = y), linetype = "dashed", size = 0.25) +
geom_segment(aes(x = -121.54, xend = -121.54, y = 37.46, yend = 37.49), arrow = arrow(length = unit(0.30, "cm"))) +
geom_text(aes(x = -121.54, y = 37.51, label = "N"),
colour = "black", size = 4, check_overlap = T) +
xlab(NULL) +
ylab(NULL) +
scalebar(x.min = -122.6,
y.min = 37.48,
x.max = -121.6,
y.max = 37.98,
dist = 10, dist_unit = "km", height = 0.02, st.dist = 0.03, st.size = 4,
transform = TRUE, model = "WGS84", location = "bottomright") +
theme(legend.position = "none",
plot.margin = unit(c(0,-1,0,-1), "cm"),
axis.text = element_text(size = 8, color = "black"))
g1
#### Methane/Salinity ####
m1 <- lm(Methane ~ Salinity, data = sf_sal_met)
summary(m1)
m2 <- lm(Methane ~ poly(Salinity, 2, raw = TRUE), data = sf_sal_met)
summary(m2)
m3 <- lm(Methane ~ poly(Salinity, 3, raw = TRUE), data = sf_sal_met)
summary(m3)
Anova(m, m1) # polynomial better, plot polynomial line on graph
g2 <- ggplot(sf_sal_met, aes(Salinity, Methane, colour = Region2)) +
geom_vline(xintercept = 35, linetype = "dashed", size = 0.5, color = "gray") +
geom_point(size = 4, alpha = 0.75) +
geom_smooth(aes(Salinity, Methane),
method = "lm",
formula = y ~ x + I(x^2) + I(x^3),
inherit.aes = F,
se = T,
size = 0.5, alpha = 0.5) +
labs(x = "Salinity (ppt)",
y = expression(""*CH[4]*" flux (Âµg/"*m^2*"/h)"),
colour = NULL) +
scale_x_continuous(trans = 'log10') +
theme_classic() +
theme(legend.position = "bottom",
legend.background = element_blank(),
legend.spacing.y = unit(0, "cm"),
legend.margin = margin(0, 12, 0.2, 0, unit = "cm"),
axis.title = element_text(size = 12, color = "black"),
axis.text = element_text(size = 10, color = "black"),
axis.ticks = element_line(color = "black"))
g2
#### Figure 1 ####
# Note, need to play around with device size, has big effect!
figure1 <- plot_grid(g1, g2, ncol = 2, align = "h", rel_widths = c(1, 1),
labels = c("a", "b"), axis = c("tbrl"))
figure1
pdf("~/Desktop/Metabolomics/Manuscript/Figure1.pdf", width = 9.7, height = 5.21)
figure1
dev.off()
#### Figure 1 ####
# Note, need to play around with device size, has big effect!
figure1 <- plot_grid(g1, g2, ncol = 2, align = "h", rel_widths = c(1, 1),
labels = c("a", "b"), axis = c("tbrl"))
figure1
pdf("~/Desktop/Metabolomics/Manuscript/Figure1.pdf", width = 9.7, height = 5.21)
pdf("~/Desktop/SouthBay/Manuscript_Cliff/Figure1.pdf", width = 9.7, height = 5.21)
figure1
dev.off()
png("~/Desktop/SouthBay/Manuscript_Cliff/Figure1.pdf", width = 9.7, height = 5.21,
units = "in", res = 300)
figure1
dev.off()
pdf("~/Desktop/SouthBay/Manuscript_Cliff/Figure1.pdf", width = 9.7, height = 5.21)
figure1
dev.off()
png("~/Desktop/SouthBay/Manuscript_Cliff/Figure1.png", width = 9.7, height = 5.21,
units = "in", res = 300)
figure1
dev.off()
library(car)
citation("car")
library(car)
citation("car")
library(lme4)
citation("lme4")
suppressWarnings(suppressMessages(library(readxl))) # For read_xlsx
suppressWarnings(suppressMessages(library(janitor))) # For cleaning
suppressWarnings(suppressMessages(library(cowplot))) # For multipanel
suppressWarnings(suppressMessages(library(plyr))) # For data manipulation
suppressWarnings(suppressMessages(library(tidyverse))) # For data manipulation
suppressWarnings(suppressMessages(library(reshape2))) # For melting
suppressWarnings(suppressMessages(library(vegan))) # For analysis
suppressWarnings(suppressMessages(library(car))) # For leveneTest
suppressWarnings(suppressMessages(library(indicspecies))) # For multipatt
suppressWarnings(suppressMessages(library(scales))) # For muted
suppressWarnings(suppressMessages(library(DESeq2))) # For normalization
suppressWarnings(suppressMessages(library(FSA))) # For se
suppressWarnings(suppressMessages(library(mctoolsr))) # For taxonomic analysis
suppressWarnings(suppressMessages(library(cowplot))) # For multipanel
suppressWarnings(suppressMessages(library(plotly))) # For interactive graphs
suppressWarnings(suppressMessages(library(RColorBrewer))) # For color palettes
suppressWarnings(suppressMessages(library(dendextend))) # For dendrogram plots
suppressWarnings(suppressMessages(library(viridis))) # For viridis palette
suppressWarnings(suppressMessages(library(gplots))) # For heatmaps
suppressWarnings(suppressMessages(library(maps))) # For geographic maps
suppressWarnings(suppressMessages(library(mapproj))) # For geographic maps
suppressWarnings(suppressMessages(library(pheatmap))) # For pretty heatmaps
suppressWarnings(suppressMessages(library(PMCMRplus))) # For Nemenyi posthoc test
find_hull <- function(df) df[chull(df$Axis01, df$Axis02),]
find_hullj <- function(df) df[chull(df$Axis01j, df$Axis02j),]
save_pheatmap_pdf <- function(x, filename, width = 7, height = 5) {
stopifnot(!missing(x))
stopifnot(!missing(filename))
pdf(filename, width=width, height=height)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
hue_pal()(5)
#### 1. Salinity ####
wyatt <- read_xlsx("~/Desktop/Wyatt Manuscript/SF Bay salinity Suppl. Tables 09.07.21.xlsx",
range = "A3:AJ173",
sheet = 3) %>%
filter(`Depth (cm)` == "0-5") %>%
select(Location, `Salinity (ppt)`, `CH4 (Âµg/m2/h)`) %>%
mutate(Dataset = "Hartman et al.") %>%
`colnames<-`(c("Location", "Salinity", "Methane", "Dataset"))
sal <- wyatt %>%
group_by(Location) %>%
summarise(sal = mean(Salinity))
jinglie <- read_xlsx("~/Desktop/Wetlands/JinglieManuscript/Supplement Table 4.xlsx") %>%
filter(Depth == "D1") %>%
select(Site, Salinity_ppt, CH4_umol_m2_d) %>%
mutate(Dataset = "Zhou et al.") %>%
`colnames<-`(c("Location", "Salinity", "Methane", "Dataset"))
install.packages('BacArena')
library(BacArena)
data("Ec_core")
bac <- Bac(Ec_core, limit_growth=FALSE)
arena <- Arena(n=20, m=20)
arena <- addOrg(arena,bac,amount=5)
arena <- addSubs(arena, smax=0.5, mediac="EX_glc(e)", unit="mM")
arena <- addSubs(arena, smax=1, mediac=c("EX_pi(e)", "EX_h2o(e)", "EX_o2(e)", "EX_nh4(e)"), unit="mM")
arena
eval <- simEnv(arena,time=12)
getVarSubs(eval)
getSubHist(eval, "EX_glc(e)")
par(mfrow=c(1,2))
plotCurves2(eval, legendpos = "right")
par(mfrow=c(2,3))
evalArena(eval, show_legend = FALSE, time=seq(1,12,2))
# Multi organism
bac1 <- Bac(Ec_core,type="ecoli_wt")
ecore_aux <- changeBounds(Ec_core, "EX_o2(e)",lb=0)
bac2 <- Bac(ecore_aux,type="ecoli_aux", setExInf=FALSE)
# Set up arena
arena <- Arena(n=20, m=20)
arena <- addOrg(arena,bac1,amount=5)
arena <- addOrg(arena,bac2,amount=5)
arena <- addSubs(arena, smax=0.5, mediac="EX_glc(e)", unit="mM")
arena <- addSubs(arena, smax=1, mediac=c("EX_pi(e)", "EX_h2o(e)", "EX_o2(e)", "EX_nh4(e)"), unit="mM")
eval <- simEnv(arena,time=10)
# Plot curves
par(mfrow=c(1,2))
plotCurves2(eval)
par(mfrow=c(1,4))
evalArena(eval,c("Population","EX_glc(e)","EX_o2(e)","EX_etoh(e)"), time=10)
plotSubDist2(eval, sub = c("EX_etoh(e)"), times = c(1,5,10))
minePheno(eval)
pmat <- getPhenoMat(eval)
pmat[,which(colSums(pmat)>0)]
# Advanced
library(parallel)
replicates <- 2
cores <- ifelse(detectCores()>=2, 2, 1)
cl <- makeCluster(cores, type="PSOCK")
clusterExport(cl, "Ec_core")
simlist <- parLapply(cl, 1:replicates, function(i){
bac <- BacArena::Bac(model=Ec_core)
arena <- BacArena::Arena(n=20, m=20)
arena <- BacArena::addOrg(arena, bac, amount=10)
arena <- BacArena::addSubs(arena, smax=0.5, mediac="EX_glc(e)", unit="mM")
arena <- BacArena::addSubs(arena, smax=1, mediac=c("EX_pi(e)", "EX_h2o(e)", "EX_o2(e)", "EX_nh4(e)"))
sim <- BacArena::simEnv(arena, time=5)
})
p <- plotGrowthCurve(simlist)
p[[2]]
p <- plotSubCurve(simlist)
p[[3]]
#### Community Analysis ####
# 8 gut microbes
data("sihumi_test")
p + ggplot2::scale_fill_manual(values=colpal2) + ggplot2::scale_color_manual(values=colpal2)
p + ggplot2::scale_fill_manual(values=colpal2) +
ggplot2::scale_color_manual(values=colpal2)
p +
ggplot2::scale_fill_manual(values=colpal2) +
ggplot2::scale_color_manual(values=colpal2)
p
p <- plotAbundance(sihumi_test)
p +
ggplot2::scale_fill_manual(values=colpal2) +
ggplot2::scale_color_manual(values=colpal2)
plotSpecActivity(sihumi_test)[[2]]
g <- findFeeding3(sihumi_test, time = 5, mets = c("EX_lac_D(e)", "EX_etoh(e)") )
plotSubUsage(sihumi_test, subs = c("EX_sucr(e)", "EX_cellb(e)", "EX_ocdca(e)"))[[2]]
plotShadowCost(sihumi_test, spec_nr=7)[[2]]
plotGrowthCurve(sihumi_test)[[2]]
# check for most changing substance concentrations
getVarSubs(sihumi_test)
subs <- names(head(getVarSubs(sihumi_test),30))
plotSubCurve(sihumi_test, mediac=subs)[[1]]
# what are bacteria doing with these substances?
plotSpecActivity(sihumi_test, subs=subs)[[2]]
plotSubCurve(sihumi_test, mediac=subs)[[1]]
# find crossfeeding interactions
findFeeding3(sihumi_test, mets = subs, time=6)
#### Gists ####
# Quick snippets here https://gist.github.com/jotech
data(bcoli_orth)
#### Gists ####
# Quick snippets here https://gist.github.com/jotech
data(bcoli_orth)
# In BacArena the activity of each reaction of an organism (flux distribution) is stored in arena@mflux.
# After finishing a simulation, the time series of the reaction activities can be accessed via eval@simlist.
data("Ec_core")
bac <- Bac(Ec_core)
arena <- Arena(n=20, m=20)
arena <- addOrg(arena,bac,amount=20)
arena <- addSubs(arena, smax=0.5, mediac="EX_glc(e)", unit="mM")
arena <- addSubs(arena, smax=1, mediac=c("EX_pi(e)", "EX_h2o(e)",
"EX_o2(e)", "EX_nh4(e)"), unit="mM")
eval <- simEnv(arena,time=4)
eval@mfluxlist[[4]]$ecoli_core_model # gives the reaction activities in time step 4
plotTotFlux(eval)
plotReaActivity(eval, reactions = c("PYK", "ATPS4r"))[[1]]
data("Ec_core")
arena <- Arena(n=10,m=10)
# by setting maxweight to infinity, duplication is disabled
# speed=0 indicates no movement
# limit_growth=FALSE removes the limit of biomass increase
bac <- Bac(Ec_core, speed=0, limit_growth=FALSE, maxweight=Inf)
arena <- addOrg(arena, bac, biomass=1)
arena <- addDefaultMed(arena, bac)
sim <- simEnv(arena, time = 5, diffusion = FALSE) # disabling diffusion
# no diffusion takes place
plotSubDist(sim, sub = "EX_co2(e)", time=c(1,3,5))
# Delayed O2
data("Ec_core")
bac  <- Bac(Ec_core)
arena <- Arena(n=20, m=20)
arena <- addOrg(arena,bac,amount=30)
arena <- addSubs(arena, smax=0.05, mediac="EX_glc(e)", unit="mM")
arena <- addSubs(arena, smax=1, mediac=c("EX_pi(e)", "EX_h2o(e)", "EX_nh4(e)"), unit="mM")
# Aenaerobic simulation for 6h
sim   <- simEnv(arena, time=6, with_shadow = T)
# Add oxygen and continue simulation for another 6 hours
sim <- addSubs(sim, smax=0.05, mediac="EX_o2(e)", unit="mM")
sim   <- simEnv(sim, time=6)
plotGrowthCurve(sim)
# anaerobic growth with production of fermentation products (acetate,formate),
# which stops after oxygen is added but continous with declining oxygen levels again.
plotSubCurve(sim, c("EX_glc(e)", "EX_o2(e)", "EX_for(e)", "EX_ac(e)"))[[2]]
# Matlab
library("R.matlab")
mod <- readMATmod("~/Desktop/MetabolicModels/gapseq_models/Actinobacillus_pleuropneumoniae_L20.mat")
arena <- Arena(n=10,m=10)
arena <- addOrg(arena, Bac(mod), 10)
arena <- addDefaultMed(arena, Bac(mod))
sim <- simEnv(arena, time=5)
plotGrowthCurve(sim)
library(microseq)
setwd("~/Desktop/EastCoast/16S/")
p1_repset <- readFasta("Plate1/otu/otu1.fasta")
p2_repset <- readFasta("Plate2/otu/otu2.fasta")
p1_OTU <- read.delim("Plate1/otu/otu1.tax.tsv")
View(p1_OTU)
p1_OTU <- read.delim("Plate1/otu/otu1.tax.tsv", row.names = 1)
p2_OTU <- read.delim("Plate2/otu/otu2.tax.tsv", row.names = 1)
#### Cross-feeding ####
# Load R-packages
library(BacArena)
library(data.table)
sybil::SYBIL_SETTINGS("SOLVER","cplexAPI") # (optional)
